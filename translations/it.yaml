# Italian

global.title: "Imparare l'impaginazione con i CSS"
global.short_title: "CSS"
global.home: "Home"
global.toc: "Sommario"
global.next: "Avanti"
global.previous: "Indietro"
global.feedback: "Problemi / Feedback"

util.extra_credit: "informazioni extra"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "Home"
util.nav.2: "Taco Menu"
util.nav.3: "Lista delle Bozze"
util.nav.4: "Hours"
util.nav.5: "Directions"
util.nav.6: "Contatti"

index.1: "Questo sito insegna le basi CSS utilizzate per l'impaginazione di qualsiasi sito web"
index.2: "Suppongo che tu conosca già cosa siano i selettori, le proprietà e i valori. E probabilmente sai già qualcosa sull'impaginazione, sebbene sia un'attivita che provochi rabbia dentro te. Se vuoi imparare HTML e CSS da zero, dovresti consultare <a href=\"http://learn.shayhowe.com/html-css/\">questo tutorial</a>. Diversamente, vediamo se possiamo risparmiarti un po' di rabbia per il tuo prossimo progetto."

index.translator: ""
index.get_started: "Inizia"

no_layout.title: "no layout"
no_layout.1: "Non avere nessun layout è quasi perfetto se quel che vuoi è una unica colonna di contenuti. Tuttavia, se un utente fa la finestra del browser molto larga, diventa fastidiosa da leggere: dopo ciascuna linea i tuoi occhi devono scorrere una lunga distanza da destra a sinistra per arrivare alla prossima linea. Prova a ridimensionare il tuo browser per vedere cosa intendo!"

no_layout.2: "Prima di aggiustare questo problema, assicuriamoci di avere ben chiara l'importante proprietà <code>display</code>"

display.title: "la proprietà \"display\""
display.intro: "<code>display</code> è la più importante proprietà CSS per controllare l'impaginazione. Ciascun elemento ha un valore predefinito di display a seconda del tipo di elemento di cui si tratta. Il valore predefinito per la maggior parte degli elementi è solitamente <code>block</code> oppure <code>inline</code>. Un elemento block è spesso chiamato elemento block-level. Un elemento inline è chiamato solamente elemento in linea."
display.block.title: "block"
display.block: "<code>div</code> è l'elemento block-level di base. Un elemento block-level inizia su una nuova riga e si allunga da sinistra a destra più che può. Altri elementi block-level comuni sono <code>p</code> e <code>form</code>, e nuovi in HTML5 sono <code>header</code>, <code>footer</code>, <code>section</code>, e altri."
display.inline.title: "inline"
display.inline.1: "<code>span</code> è l'elemento in linea di base. Un elemento inline può contenere del testo dentro un paragrafo."
display.inline.2: "come questo"
display.inline.3: "senza disturbare il flusso di quel paragrafo. L'elemento <code>a</code> è il più comune elemento inline, poichè lo utilizzi per i collegamenti."
display.none.title: "none"
display.none.1: "Un altro valore comune di display è <code>none</code>. Alcuni elementi specializzati come <code>script</code> lo usano come valore predefinito. È utilizzato comunemente con JavaScript per nascondere e mostrare elementi senza eleminarli veramente e ricrearli."
display.none.2: "È differente da <code>visibility</code>. Impostare <code>display</code> a <code>none</code> farà in modo che la pagina venga disegnata come se l'elemento non esistesse. <code>visiblity: hidden;</code> nasconderà l'elemento, ma l'elemento occuperà comunque lo spazio che avrebbe occupato se fosse stato completamente visibile."
display.other.title: "altri valori di display"
display.other: "Ci sono un sacco di valori più esotici per display, come <code>list-item</code> e <code>table</code>. <a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">Qui una lista esaustiva</a>. Discuteremo <code>inline-block</code> e <code>flex</code> più avanti."
display.extra: "As I mentioned, every element has a default display type. However, you can <em>always</em> override this! Though it wouldn't make sense to make an inline div, you can use this to customize the display of elements that have particular semantics. A common example is making inline <code>li</code> elements for horizontal menus."
display.extra: "Come ho detto prima, ciascun elemento ha un tipo di display predefinito. Tuttavia, potrai <em>sempre</em> sovrascriverlo! Sebbene potrebbe non avere senso mettere un div in linea, potrai usarlo per personalizzare la visualizzazione di elementi che hanno particolare semantica. Un esempio comune è mettere elementi <code>li</code> inline per menu orizzontali."

margin_auto.title: "margin: auto;"
margin_auto.1: "Impostare la <code>width</code> di un elemento block-level gli imperdirà di allargarsi fino ai bordi del suo contenitore da sinistra a destra. Successivamente, potrai assegnare i margini sinistro e desto a <code>auto</code> per centrare orizzontalmente quell'elemento all'interno del suo contenitore. L'elemento assumerà la largehzza che hai specificato, quindi lo spazio rimanente sarà diviso equamente tra i due margini."
margin_auto.2: "Il solo problema che si verifica è quando la finestra del browser è più stretta della larghezza del tuo elemento. Il browser risolverà la situazione creando una barra di scorrimento orizzontale sulla pagina. Miglioriamo la situazione..."

max_width.title: "max-width"
max_width.1: "Usando <code>max-width</code> invede di <code>width</code> in questa situazione migliorerà la gestione di finestre piccole da parte del browser. Ciò è importante quando si sta costruendo un sito usabile sul mobile. Ridimensiona questa pagina per provare!"
max_width.2: "Tra l'altro, <code>max-width</code> è <a href=\"http://caniuse.com/#search=max-width\">supportato da tutti i maggiori browser</a> incluso IE7+ quindi non devi aver paura di utilizzarlo."

box_model.title: "il box model"
box_model.intro: "Quando parliamo di larghezza, dovremmo parlare del suo più grande limite: il <em>box model</em>. Quando imposti la larghezza di un elemento, l'elemento potrebbe in effetti apparire più grande del valore impostato: i bordi e i padding dell'elemento, lo allargheranno oltre il valore specificato. Guarda l'esempio seguente, dove risulta che due elementi con lo stesso valore di width finiscono per avere differenti misure."
box_model.simple: "Io sono più piccolo..."
box_model.fancy: "E io sono più grande!"
box_model.outro: "Per generazioni, la soluzione a questo problema è stata la matematica. Gli autori di CSS hanno sempre scritto valori di larghezza più piccoli di quelli che avrebbero voluto, sottraendo il padding e i bordi. Fortunatamente, tu non devi più farlo..."

box_sizing.title: "box-sizing"
box_sizing.1: "Nel corso delle generazioni, la gente realizzò che la matematica non è divertente, quindi una nuova proprietà chiamata <code>box-sizing</code> fu creata. Quando imposti <code>box-sizing: border-box;</code> su un elemento, il padding e i bordi di quell'elemento non aumenteranno più la sua larghezza. Qua c'è lo stesso esempio della pagina precedente, ma con <code>box-sizing: border-box;</code> su entrambi gli elementi:"
box_sizing.simple: "Abbiamo le stesse dimensioni adesso!"
box_sizing.fancy: "Urrà!"
box_sizing.2: "Dato che questo è molto migliore, alcuni autori vogliono che tutti gli elementi delle loro pagine si comportino in questa maniera. Alcuni autori mettono il seguente codice CSS nelle loro pagine:"
box_sizing.3: "Ciò garantisce che tutti gli elementi siano sempre dimensionati in questa maniera più intuitiva."
box_sizing.4: "Dato che <code>box-sizing</code> è abbastanza nuovo, dovresti usarlo con i prefissi <code>-webkit-</code> e <code>-moz-</code> per adesso, come ho fatto in questi esempi. Questa tecnica attiva le funzionalità sperimentali specifiche per i browser. Tieni a mente che è per <a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>."

position.title: "position"
position.intro: "Per poter fare impaginazioni più complesse, dobbiamo discutere della proprietà <code>position</code>. Ha un muchio di possibili valori, e i loro nomi non hanno senso e sono impossibili da ricordare. Vediamoli uno ad uno, ma forse dovresti anche aggiungere questa pagina ai preferiti."
position.static.title: "static"
position.static.1: "<code>static</code> è il valore predefinito. Un elemento con <code>position: static;</code> non è posizionato in nessun modo particolare. Un elemento statico è detto <em>non posizionato</em> e un elemento con <code>position</code> impostata a qualunque altro valore è detto <em>posizionato</em>"
position.relative.title: "relative"
position.relative.1: "<code>relative</code> si comporta allo stesso modo di <code>static</code> a meno che aggiungano alcune proprietà extra."
position.relative.2: "Impostare le proprietà <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code> di un elemento posizionato relativamente gli causerà di essere spostato dalla sua normale posizione. Gli altri contenuti non si inseriranno per per riempire lo spazio lasciato dall'elemento."
position.fixed.title: "fixed"
position.fixed.1: "Un elemento fisso è posizionato relativamente all'area visualizzata della finestra, il che significa che rimarrà sempre nello stesso posto anche quando la pagina viene scorsa. Così come per <code>relative</code>, vengono utilizzate le proprietà <code>top</code>, <code>right</code>, <code>bottom</code>, e <code>left</code>."
position.fixed.2: "Son sicuro che avrai notato l'elemento fisso nell'angolo in basso a destra della pagina. Ti do il permesso di prestargli attenzione adesso. Qui il codice CSS che lo posiziona laggiù:"
position.fixed.3: "Un elemento fisso non lascia del vuoto nella pagina dove normalmente sarebbe dovuto essere."
position.fixed.4: "I browser mobile hanno un supporto soprendentemente traballante per <code>fixed</code>. <a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">Scopri di più sulla situazione qua</a>."
position.fixed.example: "Ciao! Non prestarmi attenzione ancora."
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code> è il valore di position più complicato. <code>absolute</code> si comporta come fixed tranne che è si riferisce al <em>più vicino padre posizionato</em> invece alla porzione di finestra visibile. Se un elemento posizionato in maniera assoluta non ha un padre posizionato, utilizza il body del documento, e comunque si muoverà insieme allo scorrimento della pagina. Ricorda, gli elementi \"posizionati\" sono quelli qualsiasi valore di position tranne <code>static</code>."
position.absolute.2: "Qui un piccolo esempio:"
position.absolute.relative: "Questo elemento è posizionato relativamente. Se questo elemento fosse <code>position: static;</code> il suo figlio posizionato in maniera assoluta sarebbe uscito e sarebbe stato posizionato relativamente al body del documento."
position.absolute.absolute: "Questo elemento è posizionato in maniera assoluta. E' posizionato relativamente al suo padre"
position.absolute.3: "Questa roba è complicata, ma è essenziale per creare impaginazioni CSS grandiose. Nella prossima pagina useremo <code>position</code> in un esempio più pratico."

position_example.title: "esempio di position"
position_example.1: "Queste cose di position potrebbero avere un pochino più di senso in un esempio pratico. Sotto una impaginazione di pagina realistica."
position_example.section.1: "Lo stile di <code>margin-left</code> per le <code>section</code> fa si che ci sia spazio per <code>nav</code>. Se così non fosse gli elementi absolute e static si sovrapporrebbero."
position_example.section.2: "Nota cosa succede se ridimensioni il tuo browser. Funziona gradevolmente!"
position_example.2: "Questo esempio funziona perchè il contenitore è più alto di nav. Se non lo fosse, nav sborderebbe fuori dal suo contenitore. Nelle pagine a venire discuteremo altre tecniche di impaginazione con differenti pro e contro."
position_example.footer: "Se utilizzi una testata o un footer posizionati fissi, sii sicuro che ci sia spazio per loro! I metto un <code>margin-bottom</code> nel <code>body</code>."

float.title: "float"
float.1: "Un'altra proprietà css utilizzata per impaginare è <code>float</code>. Float è utilizzato per avvolgere le immagini attorno al testo, come questa:"

clear.title: "clear"
clear.floating: "I feel like I'm floating!"
clear.1: "The <code>clear</code> property is important for controlling the behavior of floats. Compare these two examples:"
clear.2: "In this case, the <code>section</code> element is actually after the <code>div</code>. However, since the <code>div</code> is floated to the left, this is what happens: the text in the <code>section</code> is floated around the <code>div</code> and the <code>section</code> surrounds the whole thing. What if we wanted the <code>section</code> to actually appear after the floated element?"
clear.3: "Using <code>clear</code> we have now moved this section down below the floated <code>div</code>. You use the value <code>left</code> to clear elements floated to the left. You can also clear <code>right</code> and <code>both</code>."

clearfix.title: "the clearfix hack"
clearfix.1: "Here is a weird, bad thing that can sometimes happen when using floats:"
clearfix.2: "Uh oh... this image is taller than the element containing it, and it's floated, so it's overflowing outside of its container!"
clearfix.3: "Boo. There is a way to fix this, but it's ugly. It's called the <em>clearfix hack</em>."
clearfix.4: "Let's try adding this new CSS:"
clearfix.5: "Now let's see what happens:"
clearfix.6: "Much better!"
clearfix.7: "This works for modern browsers. If you want to support IE6 you will want to add the following:"
clearfix.8: "There are exotic browsers that may require extra attention. <a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">The world of clearfixing is pretty scary</a>, but this simple solution will work for the vast majority of browsers today."

float_layout.title: "float layout example"
float_layout.1: "It's very common to do entire layouts using <code>float</code>. Here is the same layout we did with <code>position</code> earlier, but using <code>float</code> instead."
float_layout.2: "This example works just like the last one. Notice we put a <code>clearfix</code> on the container. It's not needed in this example, but it would be if the <code>nav</code> was longer than the non-floated content."

percent.title: "percent width"
percent.1: "Percent is a measurement unit relative to the containing block. It's great for images: here we make an image that is always 50% the width of its container. Try shrinking down the page to see what happens!"
percent.2: "You could even use <code>min-width</code> and <code>max-width</code> to limit how big or small the image can get!"
percent.layout.title: "percent width layout"
percent.layout.1: "You can use percent for layout, but this can require more work. In this example, the <code>nav</code> content starts to wrap in a displeasing way when the window is too narrow. It comes down to what works for your content."
percent.layout.2: "When this layout is too narrow, the <code>nav</code> gets squished. Worse, you can't use <code>min-width</code> on the nav to fix it, because the right column wouldn't respect it."

media_queries.title: "media queries"
media_queries.1: "\"Responsive Design\" is the strategy of making a site that \"responds\" to the browser and device that it is being shown on... by looking awesome no matter what."
media_queries.2: "Media queries are the most powerful tool for doing this. Let's take our layout that uses percent widths and have it display in one column when the browser is too small to fit the menu in the sidebar:"
media_queries.3: "Now when you resize your browser it's even cooler than ever!"
media_queries.4: "Tada! Now our layout looks great even on mobile browsers. Here are <a href=\"http://mediaqueri.es/\">some popular sites that use media queries this way</a>. There is a whole lot more you can detect than <code>min-width</code> and <code>max-width</code>: check out <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">the MDN documentation</a> to learn more."
media_queries.5: "You can make your layout look even better on mobile using <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "You can create a grid of boxes that fills the browser width and wraps nicely. This has been possible for a long time using <code>float</code>, but now with <code>inline-block</code> it's even easier. <code>inline-block</code> elements are like <code>inline</code> elements but they can have a width and height. Let's look at examples of both approaches."
inline_block.hard_way.title: "The Hard Way (using float)"
inline_block.hard_way.box: "I'm floating!"
inline_block.hard_way.after: "I'm using clear so I don't float next to the above boxes."
inline_block.easy_way.title: "The Easy Way (using inline-block)"
inline_block.easy_way.info: "You can achieve the same effect using the <code>inline-block</code> value of the <code>display</code> property."
inline_block.easy_way.box: "I'm an inline block!"
inline_block.easy_way.after: "I don't have to use <code>clear</code> in this case. Nice!"
inline_block.2: "You have to do extra work for <a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6 and IE7 support</a> of <code>inline-block</code>. Sometimes people talk about <code>inline-block</code> triggering something called <code>hasLayout</code>, though you only need to know about that to support old browsers. Follow the previous link about IE6 and IE7 support if you're curious to learn more. Otherwise, let's continue."

inline_block_layout.title: "inline-block layout"
inline_block_layout.1: "You can also use <code>inline-block</code> for layouts. There are a few things to keep in mind:"
inline_block_layout.caveat.1: "<code>inline-block</code> elements are affected by the <code>vertical-align</code> property, which you probably want set to <code>top</code>."
inline_block_layout.caveat.2: "You need to set the width of each column"
inline_block_layout.caveat.3: "There will be a gap between the columns if there is any whitespace between them in the HTML"
inline_block_layout.tada: "Tada!"

column.title: "column"
column.1: "There is a new set of CSS properties that let you easily make multi-column text. Have a look:"
column.2: "CSS columns are very new, so you need to use the prefixes, and it won't work <a href=\"http://caniuse.com/#search=column\">through IE9 or in Opera Mini</a>. There are some more column-related properties, so <a href=\"http://www.quirksmode.org/css/multicolumn.html\">click here to read more</a>. Otherwise, off to the next topic."

flexbox.title: "flexbox"
flexbox.1: "The new <code>flexbox</code> layout mode is poised to redefine how we do layouts in CSS. Unfortunately the specification has changed a lot recently, so it's implemented differently in different browsers. Still, I'd like to share a couple examples so you know what's coming up. These examples currently only work <a href=\"http://caniuse.com/flexbox\">some browsers</a> that use the <a href=\"http://www.w3.org/TR/css3-flexbox/\">latest version of the standard</a>."
flexbox.2: "There are a lot of out-of-date flexbox resources around. If you want to learn more about flexbox, <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">start here</a> to learn how to identify if a resource is current or not. I have written a <a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">detailed article using the latest syntax</a>."
flexbox.3: "There is a lot more you can do with flexbox; these are just a few examples to give you an idea:"
flexbox.simple.title: "Simple Layout using Flexbox"
flexbox.simple.1: "Flexbox is so easy!"
flexbox.fancy.title: "Fancy Layout using Flexbox"
flexbox.fancy.1: "I will be 200px when there is room, and I will shrink down to 100px if there is not room, but no smaller."
flexbox.fancy.2: "I will always be 200px, no matter what."
flexbox.fancy.3: "I will fill up 1/3 of the remaining width."
flexbox.fancy.4: "I will fill up 2/3 of the remaining width."
flexbox.centering.title: "Centering using Flexbox"
flexbox.centering.1: "Finally, it's easy to vertically center something in CSS!"

frameworks.title: "css frameworks"
frameworks.1: "Because CSS layout is so tricky, there are CSS frameworks out there to help make it easier. Here are a few if you want to check them out. Using a framework is only good idea if the framework really does what you need your site to do. They're no replacement for knowing how CSS works."
frameworks.2: "That's it! If you have any feedback on this site, please <a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">let me know on Twitter</a>!"

about.title: "about this site"
about.credits: "Written and built by <a href=\"http://incompl.com\">Greg Smith</a>. Design by <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. We work at <a href=\"http://bocoup.com\">Bocoup</a>."
