# English

global.title: "CSSレイアウトを学ぶ"
global.short_title: "CSS"
global.home: "ホーム"
global.toc: "コンテンツ一覧"
global.next: "次へ"
global.previous: "前へ"
global.feedback: "問題 / フィードバック"

util.extra_credit: "応用"
util.ipsum: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor. Maecenas nisl est, ultrices nec congue eget, auctor vitae massa. Fusce luctus vestibulum augue ut aliquet. Mauris ante ligula, facilisis sed ornare eu, lobortis in odio. Praesent convallis urna a lacus interdum ut hendrerit risus congue. Nunc sagittis dictum nisi, sed ullamcorper ipsum dignissim ac. In at libero sed nunc venenatis imperdiet sed ornare turpis. Donec vitae dui eget tellus gravida venenatis. Integer fringilla congue eros non fermentum. Sed dapibus pulvinar nibh tempor porta. Cras ac leo purus. Mauris quis diam velit."
util.nav.1: "ホーム"
util.nav.2: "Taco Menu"
util.nav.3: "Draft List"
util.nav.4: "Hours"
util.nav.5: "Directions"
util.nav.6: "Contact"

index.1: "このサイトでは、ウェブサイトのレイアウトに関するCSSの基礎を学ぶことができる。"
index.2: "CSSのセレクタ/プロパティ/値について、ある程度の知識がある事を前提として書かれている。ところで、このサイトを見ている人の中には、既に少なからずレイアウトの知識がある人もいるだろう。そんな君でも、何か新しい発見があるかもしれない。HTMLやCSSについて初級レベルから学びたい君は、<a href=\"http://learn.shayhowe.com/html-css/\">チュートリアル</a>が参考になる。そうでなければ、次に君がプロジェクトに携わるとき、その苛立ちを少しでも我々が軽減できるかどうか、このサイトを見てほしい。"
index.translator: ""
index.get_started: "開始"

no_layout.title: "No Layout (レイアウト無し)"
no_layout.1: "ウェブサイトなんて、文章や画像などのコンテンツをブラウザの横幅一杯引き延ばし、縦１列に並べるだけで十分だ。だから、レイアウトなんて必要ない。そう君は考えるかもしれない。でも、ブラウザの幅を大きくしているユーザが君のサイトを見たらどう思うだろう？読むのが大変だと不平を言うかもしれない。何せ、次の行を読もうとするたびに、目線を右端から左端に戻さなくてはならないのだから。君のブラウザの横幅を広げて、このページを見てくれ。そうすれば、私の言いたい事が分かるだろう。"
no_layout.2: "さて。この問題の前に、CSSでレイアウトを作るのに重要となる、<code>display</code>プロパティについて見ていきたい。"

display.title: "\"display\"プロパティ"
display.intro: "<code>display</code>は、CSSでレイアウトを作る上で最も重要となるプロパティだ。要素の種類により、displayプロパティのデフォルト値が規定されている。デフォルト値は、<code>block</code>や<code>inline</code>が一般的だ。displayがblockの要素は、しばしばブロックレベル要素と呼ばれる。displayがinlineの要素は、単純にインライン要素と呼ばれる。"
display.block.title: "block"
display.block: "<code>div</code>は代表的なブロックレベル要素だ。ブロックレベル要素は新しい行に配置される。そして、ブラウザサイズに応じて、可能な限り左右に引き延ばされる。<code>p</code>や<code>form</code>もブロックレベル要素だ。HTML5で新しく追加された<code>header</code>、<code>footer</code>、<code>section</code>などもブロックレベル要素である。"
display.inline.title: "inline"
display.inline.1: "<code>span</code>は代表的なインライン要素だ。インライン要素は文章中に、文字列の一部として埋め込むことがきる。"
display.inline.2: "このように"
display.inline.3: "、文章の体裁を崩さない。<code>a</code>要素もインライン要素だ。他のページへのリンクするのに、君はいつもこれを使うだろう？"
display.none.title: "none"
display.none.1: "その他、よく使われるものとして<code>none</code>がある。<code>script</code>のような特殊な要素は、これがデフォルト値だ。JavaScriptで要素の表示・非表示を切り替えるのに使われたりする。要素を本当に削除したり再生成したりせず、display値を切り替えるのだ。"
display.none.2: "これは、<code>visibility</code>とは異なる。ある要素の<code>display</code>を<code>none</code>にすると、その要素は存在していないものとして扱われ、画面が構築される。<code>visibility: hidden;</code>は、その要素を非表示にするだけで、要素自体は存在しているとして扱われる。なので、その要素が表示されているときと同様に、表示領域が確保される。"
display.other.title: "他のdisplay値"
display.other: "他にも、魅力的なdisplay値がたくさんある。例えば、<code>list-item</code>や<code>table</code>だ。<a href=\"https://developer.mozilla.org/en-US/docs/CSS/display\">これがその完全なリストだ</a>。<code>inline-block</code>と<code>flex</code>については、後半で説明する。"
display.extra: "既に言及したように、全ての要素はデフォルトのdisplay値を持っている。だが、君はそれを<em>いつでも</em>overrideする事ができる! とは言うものの、div要素のdisplayをinlineにすることに、さして意味はないだろう。特別なセマンティクスを持つ要素のdisplayをカスタマイズすると便利だ。例えば、水平メニューを作るのに、<code>li</code>要素をinlineにするなどである。"

margin_auto.title: "margin: auto;"
margin_auto.1: "ブロックレベル要素の<code>width</code>を設定すると、そのcontainerの左右の辺が左右に引き延ばせることを防ぐ。そして、左右のマージンを設定することができる<code>auto</code>　container内の要素を水平方向での中央寄せ。要素は君が設定したwidthをとるだろう、それからのこりのスペースは２つのマージン間に分配される。"
margin_auto.2: "ブラウザの幅が要素の幅より狭いとき、唯一問題が起こる。ブラウザはこの問題を水平のスクロールバーを作る事で解決してくれる。 この状況をもっとよくしよう..."

max_width.title: "max-width"
max_width.1: "この状況で、<code>width</code>の代わりに、<code>max-width</code>を使うと、ブラウザのウィンドウサイズが小さい時の操作性の向上につながるだろう。携帯用のサイトを作るときに、これが重要となってくる。確認のため、このページのウィンドウサイズを変えてみてくれ!"
max_width.2: "ところで、<code>max-width</code>は、IE7+を含む<a href=\"http://caniuse.com/#search=max-width\">主要なブラウザでサポートしている</a>。だから、君は恐れず使ってくれ。"

box_model.title: "ボックスモデル"
box_model.intro: "我々はwidthについて議論している。だから、widthの大きな落とし穴である、<em>ボックスモデル</em>についてそろそろ話すべきだろう。要素のwidthを設定しても、実際の幅が設定した値より大きくなってしまう場合がある: 要素のborderとpaddingの値が、設定したwidthに加算されて引き延ばされてしまう。以下の例を見てみよう。同じwidthを持つ二つの要素が結果的に異なるサイズで表示される。"
box_model.simple: "私は小さい..."
box_model.fancy: "そして、僕は大きい!"
box_model.outro: "長い間、この問題を解決する方法は、計算を行う事だけだった。CSSを書く人は、実際に設定したいwidthの値より、いつも少し小さめの値を設定するのだ。具体的には、paddingとborderの値を差し引いた値だ。ありがたいことに、君はもうそれをする必要はない..."

box_sizing.title: "box-sizing"
box_sizing.1: "暗黒時代は終わった。ついに、計算なんてしたくないというという意思のもと、新しいCSSプロパティ<code>box-sizing</code>を人々は作ったのだ。要素に<code>box-sizing: border-box;</code>を設定すると、要素のpaddingとborderの幅が要素のwidthを増やすようなことはもはやない。 これは前のページと同じ例だ。だが、両方の要素に対して、<code>box-sizing: border-box;</code>を適用している:"
box_sizing.simple: "さあ、私たちは同じサイズになった！"
box_sizing.fancy: "やったー!"
box_sizing.2: "これはかなりいいので、CSS authorのなかにはページ中の全ての要素に対してこのような設定を行いたいとおもう。そのようなauthors以下のようなCSSを書くだろう:"
box_sizing.3: "これは全ての要素がいつもよりintuitiveな方法でサイズが決まることを保証する。"
box_sizing.4: "<code>box-sizing</code>はかなり新しいので、例に示したように<code>-webkit-</code>や<code>-moz-</code>などのプレフィックスを今は使った方がよい。この技術は、特定のブラウザの実験的フィーチャーを有効にすることができる。また、その１つである<a href=\"http://caniuse.com/#search=box-sizing\">IE8+</a>についても忘れるな。"

position.title: "position"
position.intro: "もっと複雑なレイアウトをつくるには、<code>position</code> プロパティについて理解する必要がある。 It has a bunch of possible values。名前には意味がないので、覚えるのは不可能だ。１つずつ見ていこう。だけど、このページをブックマークしておいたほうがよいかも。"
position.static.title: "static"
position.static.1: "<code>static</code> はデフォルト値です。<code>position: static;</code> を設定した要素は特別な方法で位置を指定できない。 staticな要素は、別名 <em>not positioned</em> とも呼ばれている。and an element with its position set to anything else is said to be <em>positioned</em>."
position.relative.title: "relative"
position.relative.1: "もし君が何かextraなプロパティを追加しないなら、<code>relative</code>は<code>static</code>と同等だ。"
position.relative.2: "Setting the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> プロパティ of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element."
position.fixed.title: "fixed"
position.fixed.1: "fiexdな要素は、viewportに対する相対位置で配置される。つまり、ページがスクロールされても、いつでも同じ場所に配置されるという事だ。<code>relative</code>と同様に、<code>top</code>、<code>right</code>、<code>bottom</code>や<code>left</code>プロパティが使われる。"
position.fixed.2: "このページの右下の角にあるfixedな要素について、既に君は気になっていたかもしれない。ここにきてやっと、私は君にそれに気づく許可を与えている。これが適用しているCSSだ:"
position.fixed.3: "fixedな要素は、 does not leave a gap in the page where it would normally have been located."
position.fixed.4: "モバイルブラウザは、fixedに対して、驚くほど微妙なサポートをしている。<a href=\"http://bradfrostweb.com/blog/mobile/fixed-position/\">もっと詳しい状況をしりたければここ</a>."
position.fixed.example: "Hello! まだ私のことは気にしないでね。"
position.absolute.title: "absolute"
position.absolute.1: "<code>absolute</code>は最も扱いにくい値だ。<code>absolute</code> behaves like <code>fixed</code> except relative to <em>the nearest positioned ancestor</em> instead of relative to the viewport. If an absolutely-positioned element has no positioned ancestors, it uses the document body, and still moves along with page scrolling. Remember, a \"positioned\" element is one whose position is anything except <code>static</code>."
position.absolute.2: "これは単純な例です:"
position.absolute.relative: "この要素は相対座標で配置されている。もしこの要素が<code>position: static;</code>だったら、 its absolutely-positioned child would escape and would be positioned relative to the document body."
position.absolute.absolute: "この要素は絶対座標では位置されている。その親要素の相対位置で指定される。"
position.absolute.3: "これは扱いづらい。だが、greatなCSSレイアウトを作るのには不可欠だ。次のページでは、<code>position</code>を使うと、ブラウザのウィンドウサイズが小さい時の操作性の向上につながるだろう。携帯用のサイトを作るときに、これが重要となってくる。確認のため、このページのウィンドウサイズを変えてみてくれ in a more practical example."

position_example.title: "positionの例"
position_example.1: "This position stuff might make a little more sense in a practical example. Below is a realistic page layout."
position_example.section.1: "The <code>margin-left</code> style for <code>section</code>s makes sure there is room for the <code>nav</code>. Otherwise the absolute and static elements would overlap"
position_example.section.2: "Notice what happens when you resize your browser. It works nicely!"
position_example.2: "This example works because the container is taller than the nav. If it wasn't, the nav would overflow outside of its container. In the coming pages we'll discuss other layout techniques that have different pros and cons."
position_example.footer: "fixedなheaderやfooterを使うと、make sure there is room for it! I put a <code>margin-bottom</code> on the <code>body</code>."

float.title: "float"
float.1: "レイアウトのために使うその他のCSSプロパティに、<code>float</code>がある。floatは、このように画像のまわりに文字列を回り込ませる:"

clear.title: "clear"
clear.floating: "私は浮いているみたいだ!"
clear.1: "<code>clear</code>プロパティは、floatの振る舞いを制御する上で重要だ。これら二つの例を比較しよう:"
clear.2: "この場合、本来であれば<code>section</code>要素は<code>div</code>の後にくる。だが、<code>div</code>は左に浮かばせているので、こんな風になる: <code>section</code>の中の文字列は、<code>div</code>の周りに浮いている。そして、<code>section</code>全てのものを囲んでいる。What if we wanted the <code>section</code> to actually appear after the floated element?"
clear.3: "<code>clear</code>を使うと、 we have now moved this section down below the floated <code>div</code>. You use the value <code>left</code> to clear elements floated to the left. <code>right</code>や<code>both</code>にもclearを使える。"

clearfix.title: "the clearfix hack"
clearfix.1: "Here is a weird, floatを使うとときどきおこる悪い事:"
clearfix.2: "ああ... この画像は、画像を持つ要素より高さがある。そして、画像は浮いている。だから、containerの外に画像がはみ出している!"
clearfix.3: "ブー。これを直す方法がある。だが、みっともない。それは、<em>clearfix hack</em>と呼ばれている。"
clearfix.4: "新しくCSSを追加してみよう:"
clearfix.5: "さあ、何が起こったのか見てみよう:"
clearfix.6: "かなりいいね!"
clearfix.7: "これは、大抵のモダンブラウザで動作する。もしIE6もサポートしたいなら、君は下記を追加したくなるだろう:"
clearfix.8: "追加の注意事項が必要になるかもしれないエキゾチックなブラウザがある。<a href=\"http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best\">clearfixingの世界はかなり恐ろしい</a>の後にくる。だが、単純な解決策は　大多数の(vast)メジャーなブラウザで動作するだろう。"

float_layout.title: "floatを使用したレイアウトの例"
float_layout.1: "It's very common to do entire layouts using <code>float</code>. Here is the same layout we did with <code>position</code> earlier, but using <code>float</code> instead."
float_layout.2: "This example works just like the last one. Notice we put a <code>clearfix</code> on the container. It's not needed in this example, but it would be if the <code>nav</code> was longer than the non-floated content."

percent.title: "パーセント指定のwidth"
percent.1: "パーセントは　a measurement unit relative to the containing block. It's great for images: here we make an image that is always 50% the width of its container. Try shrinking down the page to see what happens!"
percent.2: "You could even use <code>min-width</code> and <code>max-width</code> to limit how big or small the image can get!"
percent.layout.title: "パーセント指定のwidthを用いたレイアウト"
percent.layout.1: "レイアウトでパーセントを使うことができる。だが、より多くの作業が必要となりうる。この例では、the <code>nav</code> content starts to wrap in a displeasing way when the window is too narrow. It comes down to what works for your content."
percent.layout.2: "When this layout is too narrow, the <code>nav</code> gets squished. Worse, you can't use <code>min-width</code> on the nav to fix it, because the right column wouldn't respect it."

media_queries.title: "メディアクエリー"
media_queries.1: "\"レスポンシブデザイン\"は\"responds\"なサイトを作るための戦略だ to そのサイトが表示されうるブラウザやデバイス by looking awesome no matter what."
media_queries.2: "???メディアクエリーはこれを行う上での最も強力なツールだ。パーセント指定のwidthを使い、１列でそれを表示する、ブラウザサイズが小さすぎるとき 、サイドバーにメニューをフィットするため、のレイアウトを見てみよう:"
media_queries.3: "君のブラウザのサイズを変えても、今までよりずっとクールだ!"
media_queries.4: "Tada! 今や我々のレイアウトは、モバイルブラウザで見てもgreatにみえる。これは<a href=\"http://mediaqueri.es/\">このようにメディアクエリーを使った、いくつかの人気サイトだ</a>. There is a whole lot more you can detect than <code>min-width</code> and <code>max-width</code>: もっと学びたいなら、<a href=\"https://developer.mozilla.org/en-US/docs/CSS/Media_queries\">MDNドキュメント</a>を見てみよう。"
media_queries.5: "You can make your layout look even better on mobile using <a href=\"http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/\">meta viewport</a>."

inline_block.title: "inline-block"
inline_block.1: "ブラウザの幅とwrapsをいい感じにみたす、ボックスのグリッドを作る事ができる。これは、昔から<code>float</code>を使って実現してきた。だが、今は<code>inline-block</code>を使って簡単に実現できる。<code>inline-block</code>要素は<code>inline</code>要素のようなものだ。だが、widthとheightを持つ事ができるという点で異なる。両方のやり方の例を見てみよう。"
inline_block.hard_way.title: "(floatを使った)難しい方法"
inline_block.hard_way.box: "私は浮かんでいるよ!"
inline_block.hard_way.after: "私はclearを使っている。だから、next to the aboveボックスたちを浮かばせない。"
inline_block.easy_way.title: "(inline-blockを使った)簡単な方法"
inline_block.easy_way.info: "君は同じことを<code>display</code>プロパティの値を<code>inline-block</code>にすることで実現できる。"
inline_block.easy_way.box: "私は、インラインブロックです!"
inline_block.easy_way.after: "この場合、<code>clear</code>を使う必要はない。すてき!"
inline_block.2: "君はさらに知っておくべき事がある。<code>inline-block</code>の<a href=\"http://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/\">IE6とIE7のサポート</a>だ。<code>hasLayout</code>と呼ばれるものをトリガーとして, 時々<code>inline-block</code>について話す。古いブラウザをサポートするために、それだけは知っておく必要ががある。もし君がもっと詳しい事に興味があるなら、IE6とIE7のサポートについての前記のリンクに従え。ともかく、続けよう。"

inline_block_layout.title: "inline-blockで作るレイアウト"
inline_block_layout.1: "<code>inline-block</code>も使える。覚えておいてほしいいくつかの事がある:"
inline_block_layout.caveat.1: "<code>inline-block</code>要素は、<code>vertical-align</code>プロパティ、君はおそらく<code>top</code>を設定したくなる、により影響される。"
inline_block_layout.caveat.2: "君は、それぞれの列の幅を設定する必要がある"
inline_block_layout.caveat.3: "HTMLのそれらの間にwhitespaceがあれば、列間に隙間ができるだろう"
inline_block_layout.tada: "Tada!"

column.title: "column"
column.1: "新しいCSSプロパティ集合がある。それは、簡単にテキストを複数の列にすることができる。みてみろ:"
column.2: "CSSのcolumnsはとても新しい。だから、プレフィックスを使う必要がある。また、<a href=\"http://caniuse.com/#search=column\">through IE9 or in Opera Mini</a>では動作しない。他にもcolumnに関するプロパティがいくつかある。だから、<a href=\"http://www.quirksmode.org/css/multicolumn.html\">もっと読みたいならここをクリック</a>. そうでなければ、つぎの話題へいこう。"

flexbox.title: "flexbox"
flexbox.1: "新<code>flexbox</code>レイアウトモードは poised to redefine how we do layouts in CSS. Unfortunately the specification has changed a lot recently, だから異なるブラウザで異なる実装がなされている。さらに、二つの例を共有したい。そうすれば、何が出てくるかわかるだろう。これらの例は、<a href=\"http://www.w3.org/TR/css3-flexbox/\">最新の仕様基準</a>に基づいて現在動作する<a href=\"http://caniuse.com/flexbox\">いくつかのブラウザ</a>。"
flexbox.2: "まわりにはたくさんの古いフレックスボックスのリソースがある。もし君がフレックスボックスについてもっと学びたいなら、そのリソースが現在のものかどうか特定するために、<a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">ここから始める</a> 。私は、<a href=\"http://weblog.bocoup.com/dive-into-flexbox/\">最新のシンタックスを使った詳細記事</a>を書いている。"
flexbox.3: "フレックスボックスを使ってできることはもっといろいろある。これらは、君にアイディアを与えるための、一例にすぎない:"
flexbox.simple.title: "フレックスボックスを使った単純なレイアウト"
flexbox.simple.1: "フレックスボックスはとても簡単!"
flexbox.fancy.title: "フレックスボックスを使った魅惑的なレイアウト"
flexbox.fancy.1: "スペースがあれば、私は200pxだ。 スペース(room)がなければ、私は100pxに縮む。でもそれより小さくはならない。"
flexbox.fancy.2: "私は、いつも200pxだ。no matter what."
flexbox.fancy.3: "私は、1/3の幅をみたしている。"
flexbox.fancy.4: "私は、2/3の幅をみたしている。"
flexbox.centering.title: "フレックスボックスを使用した中央寄せ"
flexbox.centering.1: "ついに、簡単に、CSSを使って、なにかを垂直方向で中央寄せにしている!"

frameworks.title: "CSSフレームワーク"
frameworks.1: "CSSレイアウトはとてもトリッキーだから、いろんな人がウェブサイトを簡単に作るためのフレームワークを提供している。ここではその一部を紹介する。君のウェブサイトで実現したいレイアウトを、そのCSSフレームワークで実現できる。それならば、そのCSSフレームワークを採用するのはすごく良い考えだと言える。ただし、CSSフレームワークを使っても、CSSがどのように動作しているか知る事はできないということは覚えておいてほしい。"
frameworks.2: "以上だ! 何かフィードバックがあれば、<a href=\"https://twitter.com/intent/tweet?source=webclient&text=%40_gsmith\">Twitterで知らせてくれ</a>!"

about.title: "このサイトについて"
about.credits: "Written and built by <a href=\"http://incompl.com\">Greg Smith</a>. Design by <a href=\"http://www.isaacdurazo.com/\">Isaac Durazo</a>. We work at <a href=\"http://bocoup.com\">Bocoup</a>."